pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'pet-sitter-api'
        DOCKER_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = 'pet-sitter-api-container'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/SDSamarasinghe/Pet-Sitter-Management-System-API.git'
            }
        }

        stage('Stop Previous Container') {
            steps {
                script {
                    sh '''
                        # Stop any container using port 8000
                        EXISTING_CONTAINER=$(docker ps --filter "publish=8000" --format "{{.Names}}" | head -1)
                        if [ ! -z "$EXISTING_CONTAINER" ]; then
                            echo "Stopping existing container using port 8000: $EXISTING_CONTAINER"
                            docker stop $EXISTING_CONTAINER || true
                            docker rm $EXISTING_CONTAINER || true
                        fi
                        
                        # Also stop our specific container name if it exists
                        docker stop ${CONTAINER_NAME} || true
                        docker rm ${CONTAINER_NAME} || true
                        docker rmi ${DOCKER_IMAGE}:latest || true
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -t ${DOCKER_IMAGE}:latest .'
            }
        }

        stage('Deploy') {
            steps {
                withCredentials([
                    string(credentialsId: 'mongodb-uri', variable: 'MONGODB_URI'),
                    string(credentialsId: 'jwt-secret', variable: 'JWT_SECRET'),
                    string(credentialsId: 'cloudinary-cloud-name', variable: 'CLOUDINARY_CLOUD_NAME'),
                    string(credentialsId: 'cloudinary-api-key', variable: 'CLOUDINARY_API_KEY'),
                    string(credentialsId: 'cloudinary-api-secret', variable: 'CLOUDINARY_API_SECRET'),
                    string(credentialsId: 'azure-storage-connection', variable: 'AZURE_STORAGE_CONNECTION_STRING'),
                    string(credentialsId: 'mail-user', variable: 'MAIL_USER'),
                    string(credentialsId: 'mail-pass', variable: 'MAIL_PASS'),
                    string(credentialsId: 'mail-from', variable: 'MAIL_FROM')
                ]) {
                    sh '''
                        docker run -d \\
                            --name ${CONTAINER_NAME} \\
                            -p 8000:8000 \\
                            -e NODE_ENV=production \\
                            -e PORT=8000 \\
                            -e MONGODB_URI="${MONGODB_URI}" \\
                            -e JWT_SECRET="${JWT_SECRET}" \\
                            -e JWT_EXPIRES_IN=24h \\
                            -e CLOUDINARY_CLOUD_NAME="${CLOUDINARY_CLOUD_NAME}" \\
                            -e CLOUDINARY_API_KEY="${CLOUDINARY_API_KEY}" \\
                            -e CLOUDINARY_API_SECRET="${CLOUDINARY_API_SECRET}" \\
                            -e AZURE_STORAGE_CONNECTION_STRING="${AZURE_STORAGE_CONNECTION_STRING}" \\
                            -e AZURE_STORAGE_CONTAINER_NAME=pet-images \\
                            -e MAIL_USER="${MAIL_USER}" \\
                            -e MAIL_PASS="${MAIL_PASS}" \\
                            -e MAIL_FROM="${MAIL_FROM}" \\
                            -e MAIL_HOST=smtp.gmail.com \\
                            -e MAIL_PORT=587 \\
                            --restart unless-stopped \\
                            ${DOCKER_IMAGE}:latest
                    '''
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    sh 'sleep 30'
                    sh '''
                        for i in {1..5}; do
                            if curl -f http://localhost:8000; then
                                echo "API is healthy!"
                                break
                            else
                                echo "Attempt $i failed, retrying..."
                                sleep 10
                            fi
                        done
                    '''
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh 'docker image prune -f'
            }
        }
    }

    post {
        always {
            sh 'docker ps'
            sh 'docker logs ${CONTAINER_NAME} --tail=20 || true'
        }

        success {
            echo 'Deployment successful! ðŸŽ‰'
            echo 'API is running successfully'
        }

        failure {
            echo 'Deployment failed! ðŸ˜ž'
            sh 'docker logs ${CONTAINER_NAME} || true'
        }
    }
}
